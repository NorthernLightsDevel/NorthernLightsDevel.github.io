[{"content":"Per Øyvind Håvelsrud Senior Systems Developer \u0026amp; Architect\nA solution-oriented and structured Senior Systems Developer with over 15 years of experience in the design, development, and management of software, applications, and infrastructure. I possess particular strengths in C# .NET, SQL databases, and modern DevOps practices. With extensive experience in both new development and the maintenance of complex solutions, I thrive in collaborative, cross-functional teams where continuous improvement is central. I have a proven ability to quickly understand existing systems and find effective ways to modernize and improve them.\nWork Experience TECHPROS AS Senior Systems Developer \u0026amp; Architect | Nov 2019 – Present\nAssignment: Elvia AS (Nov 2020 – Jul 2025) Role: Tech Lead, Full-Stack Developer\nPromoted to Tech Lead summer of 2023 where I took over the responsibility for leading the development and optimization for MDMx, Elvias own Meter Data Management(MDM) system for handling millions of hourly meter readings for billing in the energy sector. Designed and implemented system architecture, assisting team developers in understanding tasks, prioritizing the backlog with the product owner, and ensuring compliance with legal and industry standards. Collaborated on engineering a critical migration of the application and its database from Azure SQL Server to Google Cloud Platform with PostgreSQL, ensuring data integrity throughout the process. Re-architected an asynchronous processing pipeline, moving from an Akka.Net actor model to a simpler, more stable worker-based system to resolve split-brain issues and better suit processing needs. Utilized Google Bigtable for efficient time-series data storage and complex querying. Developed custom libraries to manage scheduled background tasks via configuration, enhancing system flexibility. Maintained CI/CD pipelines using GitHub Actions and Azure DevOps. Assignment: TECHPROS AS (Jan 2020 – Oct 2020) Role: Solution Architect \u0026amp; Frontend Developer\nLed the frontend technical architecture for EasyConsult, the company\u0026rsquo;s internal methodology and quality system (SaaS). Developed the solution, which is closely tied to the company\u0026rsquo;s method for measuring and evaluating employee consultant suitability, following the ISO 9001 standard. Responsibilities included development, testing, deployment, operations, defining API requirements, and setting up CI/CD pipelines. Team Data System AS Developer \u0026amp; CTO | Jun 2015 – Oct 2019\nPromoted to CTO/CISO in March 2018, taking responsibility for the company\u0026rsquo;s technical strategy. Acted as Tech Lead for the modernization of \u0026lsquo;Consio\u0026rsquo;, a key membership management system used by major organizations like the Norwegian Trekking Association (DNT) and the Norwegian Association of the Blind and Partially Sighted. Led the architectural upgrade of the system from .NET 2.0 to .NET 4.6, significantly improving performance, security, and user experience. Modernized the user interface from jQuery/ASP.NET WebForms by developing a custom library for HTML5 support and utilizing modern frameworks like Vue.js. Architected and developed a new, secure authentication module using Duende IdentityServer 3, featuring a custom Angular 2.0 frontend. Implemented enhanced password security by upgrading the hashing algorithm from the framework\u0026rsquo;s default HMACSHA1 to RFC 2898 with HMACSHA512. Hapro AS (Hadelandprodukter AS) Test Developer | Jul 2010 – May 2015\nPlanned and developed software for executing hardware production tests. Designed a standardized Test Executive UI in C#/WPF to reduce operator training time and improve product traceability. Developed a helper library for simplifying calls to SOAP/WCF services. Architected and developed software for controlling and logging the charging and calibration cycles of Lithium-polymer batteries for offshore use. Started as a part-time Test Developer while studying (Sep 2007 - Sep 2010). Education NTNU Gjøvik Bachelor in Software Development | 2006 – 2018\nCertifications Microsoft Certified: Azure Fundamentals (AZ-900) Issued: Dec 2019 Programming in C# (MS 70-483) Issued: Mar 2019 Technical Skills Programming Languages: C#, Go, JavaScript, TypeScript, SQL, Java, C, Visual Basic Frameworks: .NET / .NET Core, ASP.NET, Entity Framework, Angular, React, Vue.js, Akka.Net, Spring Boot, jQuery, WCF Cloud \u0026amp; DevOps: Azure, Google Cloud Platform (GCP), Docker, Kubernetes, CI/CD, Azure DevOps, GitHub Actions, Terraform, Octopus Deploy, TeamCity Databases: SQL Server, PostgreSQL, Google Bigtable, MongoDB, Azure SQL, CosmosDB, RabbitMQ, Kafka Tools: Git, Bitbucket, Jira, Confluence, Visual Studio, JetBrains Rider, Visual Studio Code, Neovim Methodologies: DevOps, Scrum, TDD, Agile, Pair Programming Languages Norwegian: Native English: Fluent ","permalink":"http://localhost:1313/cv/","summary":"\u003ch1 id=\"per-øyvind-håvelsrud\"\u003ePer Øyvind Håvelsrud\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003eSenior Systems Developer \u0026amp; Architect\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eA solution-oriented and structured Senior Systems Developer with over 15 years of experience in the design, development, and management of software, applications, and infrastructure.  I possess particular strengths in C# .NET, SQL databases, and modern DevOps practices.  With extensive experience in both new development and the maintenance of complex solutions, I thrive in collaborative, cross-functional teams where continuous improvement is central.  I have a proven ability to quickly understand existing systems and find effective ways to modernize and improve them.\u003c/p\u003e","title":"Curriculum Vitae"},{"content":"My name is Per Øyvind Håvelsrud, and I\u0026rsquo;m the NothernLightsDeveloper.\nThe name isn\u0026rsquo;t just a gimmick; it’s a nod to where my journey with technology truly began. During a year studying space technology at Andøya, I had two pivotal discoveries: the elegant physics of the Aurora Borealis, thanks to Kristian Birkeland\u0026rsquo;s foundational science, and the creative power of programming, through my first encounter with Borland C++. That intersection of natural wonder and logical structure has defined my passion ever since.\nLike many kiss in the 90s I didn\u0026rsquo;t get access to my first compyter before the age of 10, my journey then, begun by tinkering with VB scripts I didn\u0026rsquo;t fully understand. But that year in Andøya ignited a purpose. Today, I am a professional consultant and software developer, guided by a philosophy I call Pragmatic Craftsmanship. I believe in building robust, effective solutions while honoring the craft of writing clean, readable, and performant code. This isn\u0026rsquo;t just theoretical; it\u0026rsquo;s an approach I\u0026rsquo;ve applied in demanding roles, including serving as a tech lead and developing systems to manage power grid usage data for Elvia, the utility provider for Oslo.\nMy career has been a journey of evolution. It began with hardware, automating tests for a manufacturing plant where I learned C# to interface with TestStand and LabVIEW. That role pushed me to go deeper, teaching myself VHDL to design a video switch matrix and embedded C to build test equipment that reported back over Telnet, USB, and RS232.\nAfter ending my time as a test developer, I joined a web development company specialising in delivering a CRM solution to Member organizations, at this position, I worked as a lead developer on their effort to modernize from a solution designed in the 90\u0026rsquo;s, to a more modern solution designed for the late 2010s, The original solution was built on VB.NET with WebForms and was hosted in IIS. To modernize this application, we decided to continue using VB.NET and a lot of the old architecture, as rewriting from scratch, acording to one of the original creators, would take more time, as a pragmatic developer, I could certainly agree that rewriting everything from scratch not always is the best option, but if I had more experience when starting this task, I would certainly redesign a lot of the solution, as it wasn\u0026rsquo;t even a solution, and used VB loose interpretation to \u0026ldquo;automatically\u0026rdquo; bind things, mostly, correctly together.\nWhile my roots are deep in the Microsoft ecosystem (C#, VB.NET, IIS, TFS), my curiosity has led me on countless side quests. I\u0026rsquo;ve migrated companies from TFS to Git, navigated a broad spectrum of databases from SQL Server to Google Bigtable, and explored the frontend with jQuery, Vue, and Angular. This path of continuous learning eventually led me from the comfort of JetBrains Rider to the minimalist power of Neovim and the granular control of Arch Linux—a journey of enlightenment I continue to document on this blog.\nMy Toolkit Primary Languages: C#, Go, Java, Kotlin Hardware/Embedded: VHDL, Embedded C Web Frameworks \u0026amp; Libraries: ASP.NET Core, .NET, Angular, Vue, jQuery (and personal experience with React) Databases: PostgreSQL, SQL Server, MariaDB, SQLite, MongoDB, Google Bigtable Tools \u0026amp; Infrastructure: Git, Docker, Windows Server/IIS, Neovim, Linux Administration, Kubernetes Version Control History: Git, TFS, SVN Beyond the Code When I’m not at the keyboard, my time is spent with my wife and two kids. I find balance and focus in the outdoors while deer hunting in the fall, in the precision of competitive pistol shooting, and in the tangible progress of home renovation.\nThanks for stopping by. I hope you find something useful or interesting in my documented journey.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eMy name is Per Øyvind Håvelsrud, and I\u0026rsquo;m the NothernLightsDeveloper.\u003c/p\u003e\n\u003cp\u003eThe name isn\u0026rsquo;t just a gimmick; it’s a nod to where my journey with technology truly began. During a year studying space technology at Andøya, I had two pivotal discoveries: the elegant physics of the Aurora Borealis, thanks to Kristian Birkeland\u0026rsquo;s foundational science, and the creative power of programming, through my first encounter with Borland C++. That intersection of natural wonder and logical structure has defined my passion ever since.\u003c/p\u003e","title":"About Me"},{"content":"Setting up BTRBK After installing Arch, I wanted to set up a snapshot tool to automate creating snapshots on an hourly basis. Because I have used Timeshift previously, and new it had support for btrfs, I initialy tried to install and configure Timeshift however, because I dont follow the exact same subvolume layout as Timeshift expects, this was fruitless, and I decided to use btrbk instead. Btrbk does not have a graphical UI like Timeshift, but since we don\u0026rsquo;t normaly need to browse the backups, and they are available in the .snapshots directory anyways, I figured its not necesary.\nTo set up btrbk is fairly straight forwards, just follow these steps\nInstall sudo pacman -S btrbk Configure sudo vi /etc/btrbk/btrbk.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # /etc/btrbk/btrbk.conf timestamp_format long snapshot_dir /.snapshots group hourly subvolume / snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create ondemand subvolume /home snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create onchange subvolume /root snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create onchange subvolume /boot snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create ondemand Create a script to run during each backup sudo vi /usr/local/bin/btrbk-run.sh: 1 2 3 4 5 #!/bin/bash /usr/bin/btrbk run # Runs a complete, new backup /usr/bin/btrbk clean # Cleans old backups locally and remotelly /usr/bin/btrbk resume # Resumes transfer if, at any point a backup has been taken without being transfered to a target. ``` Create a systemd service file /etc/systemd/system/btrbk-hourly.service: 1 2 3 4 5 6 [Unit] Description=btrbk hourly snapshot and backup service [Service] Type=oneshot ExecStart=/usr/local/bin/btrbk-run.sh Create a systemd timer file /etc/systemd/system/btrbk-hourly.timer: 1 2 3 4 5 6 7 8 9 [Unit] Description=Run btrbk hourly snapshot and backup script [Timer] OnCalendar=hourly Persistent=true [Install] WantedBy=timers.target Enable the systemd timer sudo systemctl enable --now btrbk-hourly.timer After these steps, a snapshot should now be taken every hour, on the hour. In addition, I have set up a computer with a fairly large btrfs volume that I call work-computer in my .ssh config, this machine can be made reachable e.g. through a tailnet or ssh jump host, If you want to transfer backups to this computer simultaneously with backups, you should set up a separate user instead of running the service as root, e.g. backupuser\nCreate the backup user sudo useradd -m -U backupuser\nGive the backupuser access to run btrbk commands as sudo sudo visudo -f /etc/sudoers.d/btrbk_permissions\n1 2 # Allows backupuser access to specific btrbk commands backupuser ALL=(ALL) NOPASSWD: /usr/bin/btrbk * Create a ssh key for the backup user\n1 2 sudo -su backupuser ssh-keygen Create a ssh host entry for the backupserver in the backupuser\u0026rsquo;s .ssh config sudo -u backupuser vi /home/backupuser/.ssh/config\n1 2 3 4 Host backup-server Hostname 192.168.x.x User backupuser Port 22 Create the backup user on the backup server like in step [2. Give the backupuser access to run btrbk commands as sudo]\nGive the backupuser owner permissions to the backup target path on the backupserver\n1 sudo chown -R backupuser:backupuser /mnt/backups Add ssh key from the source computer\u0026rsquo;s /home/backupuser/.ssh/id_ed25519.pub to home/backupuser/.ssh/authorized_keys on the backup server\nUpdate the scripts and configurations to run as backup user: # /usr/local/bin/btrbk-run.sh\n1 2 3 4 5 #!/bin/bash /usr/bin/sudo /usr/bin/btrbk run /usr/bin/sudo /usr/bin/btrbk clean /usr/bin/sudo /usr/bin/btrbk resume # /etc/systemd/system/btrbk-hourly.service\n1 2 3 4 5 6 7 8 [Unit] Description=btrbk hourly snapshot and backup service [Service] Type=oneshot User=backupuser Group=backupuser ExecStart=/usr/local/bin/btrbk-run.sh # /etc/btrbk/btrbk.conf:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # /etc/btrbk/btrbk.conf timestamp_format long snapshot_dir /.snapshots target ssh://backup-server/mnt/backups/$(hostnamectl hostname | tr -d \u0026#39;\\n\u0026#39;)/ target_preserve_min 2d target_preserve *y 24m 6w 14d group hourly subvolume / snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create ondemand subvolume /home snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create onchange subvolume /root snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create onchange subvolume /boot snapshot_preserve_min 1d snapshot_preserve *y 18m 6w 14d snapshot_create ondemand ","permalink":"http://localhost:1313/posts/btrbk-setup/","summary":"\u003ch1 id=\"setting-up-btrbk\"\u003eSetting up BTRBK\u003c/h1\u003e\n\u003cp\u003eAfter installing Arch, I wanted to set up a snapshot tool to automate creating snapshots on an hourly basis.\nBecause I have used Timeshift previously, and new it had support for btrfs, I initialy tried to install and configure Timeshift however, because I dont follow the exact same subvolume layout as Timeshift expects, this was fruitless, and I decided to use btrbk instead. Btrbk does not have a graphical UI like Timeshift, but since we don\u0026rsquo;t normaly need to browse the backups, and they are available in the .snapshots directory anyways, I figured its not necesary.\u003c/p\u003e","title":"Btrbk Setup"},{"content":"Procedure for installing Arch Linux Pre installation Download and verify the ISO First, download the ARCH Linux ISO from the official website, it\u0026rsquo;s a good practice to verify the signature as well, in order to ensure you have an authentic file.\nCreate a bootable USB You can create a bootable USB by using Ventoy, or by using the dd command\nExample using dd to /dev/sda\n1 $ sudo dd if=/path/to/arch.iso of=/dev/sda bs=1M status=progress oflag=direct Boot into the Live environment Reboot your computer and boot from the USB device, You may need to press a key like Del, F12 F8 or F2 during startup to select the USB for boot\nConnect to the internet If you are not using a wired connection, you probably need to connect to a Wifi now\n1 2 3 4 5 6 7 # Network commands $ iwctl device list # powe on the adapter if powered off $ iwctl adapter phy0 set-property Powered on $ iwctl station wlan0 show $ iwctl station wlan0 get-networks $ iwctl station wlan0 connect {SSID} Check that your connection is working\n1 $ ping archlinux.org -c 3 Update the system clock 1 $ timedatectl set-ntp true Disk preparation Erase the disk securelly and format to the desired partition layout If your disk contains sensitive data, you can securely erase it. This step is optional for new drives.\nFor NVME SSDs 1 $ nvme format /dev/nvme0n1 --ses=2 --reset For SATA SSDs Check if the drive is frozen, if it is, you have to suspend and resume your system to unfreeze it. 1 $ hdparm -I /dev/sda | grep \u0026#34;frozen\u0026#34; Set a temporary password and erase the disk 1 2 $ hdparm --user-master u --security-set-pass password /dev/sda $ hdparm --user-master u --security-erase-enhanced password /dev/sda For traditional Harddrives using the shred command to overwrite with random data 1 shred -n 1 -vz /dev/sda Partition the disk We will create 2 partitions in this guide, where the first is teh EFI partition, and the second is the encrypted btrfs partition where the remainding files are stored\nExample partition layout\n1 2 3 Id Size Type Filesystem 1 1GiB EFI(ef00) FAT 32 2 Remainding space Linux LUKS(8309) LUKS 1 $ gdisk /dev/nvme0n1 Create a new GPT partition header with o option Create a new 1GB EFI partion with the n option and set code to ef00 Create a new Linux LUKS partition for the remainding disk space with the n option and set code to 8309 Save the partition layout with the w option, this will exit gdisk simultaneously.\nFormat the EFI partition NOTE: The FAT partition is labeled EFI, but we will use the UUID for mount points.\n1 $ mkfs.fat -F 32 -n EFI /dev/nvme0n1p1 Randomize the partition that will be encrypted NOTE: This step is optional, and will add wear to the disk, but will add security by hiding data boundaries for the next step\n1 2 3 4 $ cryptsetup luksFormat /dev/nvme0n1p2 --header /tmp/cryptdisk.img $ cryptsetup open /dev/nvme0n1p2 --header /tmp/cryptdisk.img cryptdisk $ dd if=/dev/zero of=/dev/mapper/cryptdisk bs=1M status=progress $ cryptsetup close cryptdisk Create and mount the encrypted partition 1 2 $ cryptsetup lumsFormat /dev/nvme0n1p2 --pbkdf pbkdf2 --hash sha256 $ cryptsetuo open /dev/nvme0n1p2 arch Create the btrfs file system and set up subvolumes 1 2 3 4 5 6 7 8 9 10 $ mkfs.btrfs -L ARCH /dev/mapper/arch $ mount /dev/mapper/arch /mnt $ btrfs subvolume create /mnt/@ # Linux ROOT $ btrfs subvolume create /mnt/@boot # Optional /boot subvolume to keep boot separate from / $ btrfs subvolume create /mnt/@root # Optional subvolume for home for the /root user $ btrfs subvolume create /mnt/@home # Optional, but recommended subvolume for /home $ btrfs subvolume create /mnt/@.snapshots # Optional subvolume for keeping snapshots $ btrfs subvolume create /mnt/@log # Optional subvolume for logs, recommended if snapshots is enabled, to avoid copies of old logs $ btrfs subvolume create /mnt/@pkg # Optional subvolume for pacman cache information, recommended to keep outside snapshots $ umount /mnt Mount the root file structure under /mnt NOTE: some mount options like noatime and ssd should be omitted if you use a normal drive, compression can in addition be tuned if you want a different compression level than the default of 3\n1 2 3 4 5 6 7 8 $ mount --mkdir -o ssd,noatime,compress=zstd,subvol=@ /dev/mapper/root /mnt $ mount --mkdir -o ssd,noatime,compress=zstd,subvol=@boot /dev/mapper/root /mnt/boot $ mount --mkdir -o ssd,noatime,compress=zstd,subvol=@root /dev/mapper/root /mnt/root $ mount --mkdir -o ssd,noatime,compress=zstd,subvol=@home /dev/mapper/root /mnt/home $ mount --mkdir -o ssd,noatime,compress=zstd,subvol=@.snapshots /dev/mapper/root /mnt/.snapshots $ mount --mkdir -o ssd,noatime,compress=zstd,subvol=@log /dev/mapper/root /mnt/var/log $ mount --mkdir -o ssd,noatime,compress=zstd,subvol=@pkg /dev/mapper/root /mnt/var/cache/pacman/pkg $ mount --mkdir /dev/nvme0n1p1 /mnt/efi System Installation Select the best mirrors based on your location NOTE: I live in Norway, so I chose Norway and Sweden\n1 $ reflector --protocol https --country Norway,Sweden --latest 5 --save /etc/pacman.d/mirrorlist Install base system NOTE: If you wish to use labels instead of UUIDS in /etc/fstab, thats completely possible by replacing the -U flag with -L for genfstab\n1 2 3 # Install either intel-ucode or amd-ucode depending on CPU in the device $ pacstrap -K /mnt base linux linux-headers linux-firmware intel-ucode neovim bash-completion $ genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Chroot into the environment 1 $ arch-chroot /mnt Set up timezone and hostname 1 2 3 $ ln -sf /usr/share/zoneinfo/Europe/Oslo /etc/localtime $ hwclock --systohc $ echo {hostname} \u0026gt; /etc/hostname Install necessary software to be able to set up boot configuration 1 $ pacman -S btrfs-progs dosfstools grub grub-btrfs efibootmgr usbutils Create keyfile to ensure we don\u0026rsquo;t need to enter password twice 1 2 $ dd if=/dev/random iflag=fullblock bs=4k count=1 | install -m 0600 /dev/sdtin /etc/cryptsetup-keys.d/arch.key $ cryptsetup luksAddKey /dev/nvme0n1p2 /etc/cryptsetup-keys.d/arch.key Set up mkinitcpip to configure initramfs 1 $ nvim /etc/mkinitcpio.conf Here is my mkinitcpio.conf file\n1 2 3 4 MODULES=(btrfs hid_apple usbhid xhci_hcd) BINARIES=(/usr/bin/btrfs) FILES=(/etc/cryptsetup-keys.d/rootfs.key) HOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block encrypt filesystems fsck) NOTE: The modules, with exception of btrfs are set up because I have a Keycron USB keyboard\n1 2 3 usbhid to support USB keyboard hid_apple because the keyboard is reporting as an apple keyboard to the OS xhci_hcd to support USB 3.0 and newer Run mkinitcpio to generate a correct initramfs file.\n1 $ mkinitcpio -P Set up GRUB bootloader Because GRUB is one of the few bootloaders that support a fully encrypted /boot, we need to set up grub EFI boot\n1 $ nvim /etc/default/grub Go to the line GRUB_CMDLINE_LINUX(line 6) and edit to use an encrypted disk NOTE: Ensure to replace $((blkid -s UUID -o value /dev/nvme0n1p2)) with the actial UUID reported by the command.\n1 GRUB_CMDLINE_LINUX=\u0026#34;loglevel=3 quiet cryptdevice=UUID=$((blkid -s UUID -o value /dev/nvme0n1p2)):arch cryptkey=rootfs:/etc/cryptsetup-keys.d/arch.key\u0026#34; Go to the line # GRUB_ENABLE_CRYPTDISL=y(line 13) and uncomment Set up EFI boot 1 $ grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB Create GRUB config 1 $ grub-mkconfig -o /boot/grub/grub.cfg Install userland tools 1 $ pacman -S base-devel git bash-completion sudo tmux fastfetch ripgrep networkmanager wireless_tools ufw usbutils wget Set up so members of group wheel have sudo rights 1 $ EDITOR=nvim visudo Search for the line @ %wheel ALL=(ALL:ALL) ALL and remove # to uncomment.\nSet up user with sudo privileges 1 2 $ useradd -m -G wheel -U {username} $ passwd {username} Fetch this repo and install the rest of the tools reqired 1 2 3 4 5 6 7 8 $ su {username} $ mkdir .git $ cd .git $ git clone https://github.com/peroyhav/documentation.git $ cd documentation $ sudo pacman -S --needed - arch.packages $ sudo systemctl enable gdm $ sudo systemctl enable NetworkManager Exit fakeroot, unmount disk and reboot 1 2 3 4 $ logout $ exit $ umount -R /mnt $ reboot Congratulations, you should now have a graphical UI booted with gnome, and are able to switch to hyprland after configuring terminal tools and such. ","permalink":"http://localhost:1313/posts/installingarch/","summary":"\u003ch1 id=\"procedure-for-installing-arch-linux\"\u003eProcedure for installing Arch Linux\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003ch2 id=\"pre-installation\"\u003ePre installation\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003ch3 id=\"download-and-verify-the-iso\"\u003eDownload and verify the ISO\u003c/h3\u003e\n\u003cp\u003eFirst, download the ARCH Linux ISO from \u003ca href=\"https://archlinux.org/download/\"\u003ethe official website\u003c/a\u003e, it\u0026rsquo;s a good practice to verify the signature as well, in order to ensure you have an authentic file.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"create-a-bootable-usb\"\u003eCreate a bootable USB\u003c/h3\u003e\n\u003cp\u003eYou can create a bootable USB by using Ventoy, or by using the dd command\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eExample using dd to /dev/sda\u003c/p\u003e\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo dd \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/path/to/arch.iso of\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/dev/sda bs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e1M status\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eprogress oflag\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003edirect\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ch3 id=\"boot-into-the-live-environment\"\u003eBoot into the Live environment\u003c/h3\u003e\n\u003cp\u003eReboot your computer and boot from the USB device, You may need to press a key like \u003cem\u003eDel\u003c/em\u003e, \u003cem\u003eF12\u003c/em\u003e \u003cem\u003eF8\u003c/em\u003e or \u003cem\u003eF2\u003c/em\u003e during startup to select the USB for boot\u003c/p\u003e","title":"Installing Arch Linux fully encrypted"}]